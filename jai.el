;; Build a JAI framework
(defun jai-buildop ()
  "Generate a skeleton for a RenderedOp in our style"
  (interactive)
  (setq name (read-from-minibuffer "RenderedOp name: "))
  ;; CHECK to make SURE that name contains something or this is bunk
  (cond ((> (length name) 0)
         (setq opstr (read-from-minibuffer "JAI Operation: "))
         
         ;; Make sure we have an operation name also!
         (cond ((> (length  opstr) 0)            
                
                (insert (format "RenderedOp %s; {\n" name))
                (insert (format "\tParameterBlockJAI pb = new ParameterBlockJAI(\"%s\");\n" opstr))

                (setq opsym (intern (concat (downcase opstr) "-builder")))
         
                (cond ((functionp opsym)

                       (setq oplist    (funcall opsym))
                       (setq sourcecnt (car oplist))
                       (setq params    (cdr oplist))
                
                       (while (not (null params))
                         (insert (format "\t\tpb.setParameter(\"%s\",);\n" (car params)))
                         (setq params (cdr params))
                         )

                       (while (< 0 sourcecnt)
                         (insert "\t\tpb.addSource();\n")
                         (setq sourcecnt (- sourcecnt 1))
                         )

                       )
                      )
         
                (insert (format "\t%s = JAI.create(\"%s\", pb);\n" name opstr))
                (insert "}\n")
                )
               )
         )
        )
  )

(defun absolute-builder () '(1) )
(defun addcollection-builder '(2) )
(defun addconst-builder () '(1 "constants") )
(defun addconsttocollection-builder () '(2 "constants") )
(defun add-builder () '(2) )
(defun affine-builder () '(1 "transform" "interpolation" "backgroundValues") )
(defun andconst-builder () '(1 "constants") )
(defun and-builder () '(2) )
(defun awtimage-builder () '(0 "awtImage") )
(defun bandcombine-builder () '(1 "matrix") )
(defun bandmerge-builder () '(2) )
(defun bandselect-builder () '(1 "bandIndices") )
(defun binarize-builder () '(1 "threshold") )
(defun bmp-builder () '(0 "stream") )
(defun border-builder () '(0 "leftPad" "rightPad" "topPad" "bottomPad" "type") )
(defun boxfilter-builder () '(1 "width" "height" "xkey" "ykey") )
(defun clamp-builder () '(1 "low" "high") )
(defun colorconvert-builder () '(1 "colorModel") )
(defun composite-builder () '(2 "source1Alpha" "source2Alpha" "alphaPremultiplied" "destAlpha") )
(defun conjugate-builder () '(1) )
(defun constant-builder () '(0 "width" "height" "bandValues") )
(defun convolve-builder () '(1 "kernel") )
(defun crop-builder () '(1 "x" "y" "width" "height") )
(defun dct-builder () '(1) )
(defun dft-builder () '(1 "scalingType" "dataNature") )
(defun dilate-builder () '(1 "kernel") )
(defun dividebyconst-builder () '(1 "constants") )
(defun dividecomplex-builder () '(2) )
(defun divide-builder () '(2) )
(defun divideintoconst-builder () '(1 "constants") )
(defun encode-builder () '(1 "stream" "format" "param") )
(defun erode-builder () '(1 "kernel") )
(defun errordiffusion-builder () '(1 "colorMap" "errorKernel") )
(defun exp-builder () '(1) )
(defun extrema-builder () '(1 "roi" "xPeriod" "yPeriod" "saveLocations" "maxRuns") )
(defun fileload-builder () '(0 "filename" "param" "checkFileLocally") )
(defun filestore-builder () '(1 "filename" "format" "param" "checkFileLocally") )
(defun filteredsubsample-builder () '(1 "scaleX" "scaleY" "qsFilter" "interpolation") )
(defun format-builder () '(1 "dataType") )
(defun fpx-builder () '(0 "stream" "param") )
(defun gif-builder () '(0 "stream") )
(defun gradientmagnitude-builder () '(1 "mask1" "mask2") )
(defun histogram-builder () '(1 "roi" "xPeriod" "yPeriod" "numBins" "lowValue" "highValue") )
(defun idct-builder () '(1) )
(defun idft-builder () '(1 "scalingType" "dataNature") )
(defun iip-builder () '(0 "URL" "subImages" "filter" "colorTwist" "contrast" "sourceROI" "transform" "aspectRatio" "destROI" "rotation" "mirrorAxis" "ICCProfile" "JPEGQuality" "JPEGTable") )
(defun iipresolution-builder () '(0 "URL" "resolution" "subImage") )
(defun imagefunction-builder () '(0 "function" "width" "height" "xScale" "yScale" "xTrans" "yTrans") )
(defun invert-builder () '(1) )
(defun jpeg-builder () '(0 "stream") )
(defun log-builder () '(1) )
(defun lookup-builder () '(1 "table") )
(defun magnitude-builder () '(1) )
(defun magnitudesquared-builder () '(1) )
(defun matchcdf-builder () '(1 "CDF") )
(defun max-builder () '(1) )
(defun maxfilter-builder () '(1 "maskShape" "maskSize") )
(defun mean-builder () '(1 "roi" "xPeriod" "yPeriod") )
(defun medianfilter-builder () '(1 "maskShape" "maskSize") )
(defun min-builder () '(1) )
(defun minfilter-builder () '(1 "maskShape" "maskSize") )
(defun mosaic-builder () '(2 "mosaicType" "sourceAlpha" "sourceROI" "sourceThreshold" "backgroundValues") )
(defun multiplycomplex-builder () '(2) )
(defun multiplyconst-builder () '(1 "constants") )
(defun multiply-builder () '(2) )
(defun not-builder () '(1) )
(defun null-builder () '(0) )
(defun orconst-builder () '(1 "constants") )
(defun ordereddither-builder () '(1 "colorMap" "ditherMask") )
(defun or-builder () '(2) )
(defun overlay-builder () '(2) )
(defun pattern-builder () '(1 "width" "height") )
(defun periodicshift-builder () '(1 "shiftX" "shiftY") )
(defun phase-builder () '(1) )
(defun piecewise-builder () '(0 "breakPoints") )
(defun png-builder () '(0 "stream" "param") )
(defun pnm-builder () '(0 "stream") )
(defun polartocomplex-builder () '(1) )
(defun renderable-builder () '(1 "downSampler" "maxLowResDim" "minX" "minY" "height") )
(defun rescale-builder () '(1 "constants" "offsets") )
(defun rotate-builder () '(1 "xOrigin" "yOrigin" "angle" "interpolation" "backgroundValues") )
(defun scale-builder () '(1 "xScale" "yScale" "xTrans" "yTrans" "interpolation") )
(defun shear-builder () '(1 "shear" "shearDir" "xTrans" "yTrans" "interpolation" "backgroundValues") )
(defun stream-builder () '(0 "stream" "param") )
(defun subsampleaverage-builder () '(1 "scaleX" "scaleY") )
(defun subsamplebinarytogray-builder () '(1 "xScale" "yScale") )
(defun subtractconst-builder () '(1 "constants") )
(defun subtract-builder () '(2) )
(defun subtractfromconst-builder () '(1 "constants") )
(defun threshold-builder () '(1 "low" "high" "constants") )
(defun tiff-builder () '(0 "stream" "param" "page") )
(defun translate-builder () '(1 "xTrans" "yTrans" "interpolation") )
(defun transpose-builder () '(1 "type") )
(defun unsharpmask-builder () '(1 "kernel" "gain") )
(defun url-builder () '(0 "URL" "param") )
(defun warp-builder () '(1 "warp" "interpolation" "backgroundValues") )
(defun xorconst-builder () '(1 "constants") )
(defun xor-builder () '(2) )


(defun jai-addhook ()
  (global-set-key "\C-cj" 'jai-buildop)
)
(add-hook 'java-mode-hook 'jai-addhook)
